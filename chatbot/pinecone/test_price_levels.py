#!/usr/bin/env python3
"""
Prueba espec√≠fica para b√∫squedas por nivel de precios
Este archivo prueba el sistema de b√∫squeda por precios con los datos espec√≠ficos del usuario
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'itinerario_backend.settings')
django.setup()

from chatbot.pinecone.places_vector_store import PlacesVectorStore
from chatbot.pinecone.places_views import extract_search_criteria_from_message

def test_price_level_search():
    """
    Prueba la funcionalidad de b√∫squeda por nivel de precios
    """
    
    print("üí∞ PROBANDO B√öSQUEDAS POR NIVEL DE PRECIOS")
    print("=" * 60)
    
    # Mensajes espec√≠ficos para probar niveles de precio
    price_test_messages = [
        # Nivel 0 - Gratis
        "quiero un lugar gratis para visitar",
        "busco un restaurante sin costo",
        "necesito un lugar sin pago",
        
        # Nivel 1 - Econ√≥mico (0.00-50.00 PEN)
        "quiero un restaurante econ√≥mico",
        "busco un hotel barato",
        "necesito un caf√© accesible",
        "quiero un lugar bajo precio",
        
        # Nivel 2 - Moderado (50.00-150.00 PEN)
        "busco un restaurante moderado",
        "quiero un hotel de precio medio",
        "necesito un lugar normal",
        "busco un restaurante est√°ndar",
        
        # Nivel 3 - Caro (150.00-400.00 PEN)
        "quiero un restaurante caro",
        "busco un hotel elevado",
        "necesito un lugar alto precio",
        
        # Nivel 4 - Muy Caro (400.00-1000.00 PEN)
        "quiero un restaurante muy caro",
        "busco un hotel de lujo",
        "necesito un lugar exclusivo",
        "quiero un restaurante premium",
        "busco un lugar de alta cocina",
        "quiero un restaurante de estrellas michelin",
        
        # Combinaciones con otros criterios
        "quiero un restaurante econ√≥mico con comida italiana",
        "busco un hotel de lujo con spa y vista al mar",
        "necesito un caf√© barato cerca del centro",
        "quiero un restaurante moderado para la familia",
        "busco un lugar gratis para estudiantes",
        "necesito un hotel exclusivo de 5 estrellas"
    ]
    
    # Inicializar vector store
    vector_store = PlacesVectorStore()
    
    for i, message in enumerate(price_test_messages, 1):
        print(f"\nüìù Mensaje {i}: {message}")
        print("-" * 50)
        
        # Extraer criterios usando DeepSeek
        criteria = extract_search_criteria_from_message(message)
        
        if criteria and criteria.get('price_level'):
            print(f"‚úÖ Nivel de precio detectado: {criteria['price_level']}")
            
            # Realizar b√∫squeda por nivel de precio
            try:
                results = vector_store.find_places_by_price_level(
                    price_level=criteria['price_level'],
                    place_type=criteria.get('place_type'),
                    features=criteria.get('features'),
                    top_k=3
                )
                
                print(f"üîç Resultados encontrados: {len(results)}")
                
                for j, result in enumerate(results[:3], 1):
                    metadata = result['metadata']
                    print(f"   {j}. {metadata.get('nombre')}")
                    print(f"      Tipo: {metadata.get('tipo_principal')}")
                    print(f"      Rating: {metadata.get('rating')}")
                    print(f"      Nivel Precios: {metadata.get('nivel_precios__descripcion')}")
                    print(f"      Score: {result['score']:.3f}")
                
            except Exception as e:
                print(f"‚ùå Error en b√∫squeda: {str(e)}")
        else:
            print("‚ùå No se detect√≥ nivel de precio")
        
        print()

def test_price_ranges():
    """
    Prueba b√∫squedas por rangos espec√≠ficos de precios
    """
    
    print("\nüéØ PROBANDO B√öSQUEDAS POR RANGOS DE PRECIOS")
    print("=" * 60)
    
    # Rangos espec√≠ficos seg√∫n los datos del usuario
    price_ranges = [
        "50-150",      # Moderado
        "100-300",     # Rango personalizado
        "hasta 50",    # Econ√≥mico
        "desde 200",   # Caro o m√°s
        "150-400",     # Caro
        "400-1000"     # Muy caro
    ]
    
    vector_store = PlacesVectorStore()
    
    for price_range in price_ranges:
        print(f"\nüí∞ Rango: {price_range}")
        print("-" * 30)
        
        try:
            results = vector_store.find_places_by_price_level(
                price_level=price_range,
                top_k=3
            )
            
            print(f"üîç Resultados encontrados: {len(results)}")
            
            for i, result in enumerate(results[:3], 1):
                metadata = result['metadata']
                print(f"   {i}. {metadata.get('nombre')}")
                print(f"      Nivel: {metadata.get('nivel_precios__nivel')}")
                print(f"      Rango: {metadata.get('nivel_precios__rango_inferior')} - {metadata.get('nivel_precios__rango_superior')} {metadata.get('nivel_precios__moneda')}")
                print(f"      Score: {result['score']:.3f}")
                
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
        
        print()

def test_smart_search_with_prices():
    """
    Prueba b√∫squedas inteligentes que incluyen criterios de precio
    """
    
    print("\nüß† PROBANDO B√öSQUEDAS INTELIGENTES CON PRECIOS")
    print("=" * 60)
    
    # Criterios complejos que incluyen precios
    complex_criteria = [
        {
            'place_type': 'restaurante',
            'features': ['italiano', 'terraza'],
            'price_level': 'econ√≥mico',
            'rating_min': 4.0
        },
        {
            'place_type': 'hotel',
            'features': ['spa', 'vista al mar'],
            'price_level': 'muy caro',
            'rating_min': 5.0
        },
        {
            'place_type': 'caf√©',
            'features': ['terraza'],
            'price_level': 'moderado',
            'opening_hours': 'abierto_ahora'
        }
    ]
    
    vector_store = PlacesVectorStore()
    
    for i, criteria in enumerate(complex_criteria, 1):
        print(f"\nüîç Criterios complejos {i}:")
        for key, value in criteria.items():
            print(f"   {key}: {value}")
        print("-" * 40)
        
        try:
            results = vector_store.smart_place_search(
                search_criteria=criteria,
                top_k=3
            )
            
            print(f"‚úÖ Resultados encontrados: {len(results)}")
            
            for j, result in enumerate(results[:3], 1):
                metadata = result['metadata']
                print(f"   {j}. {metadata.get('nombre')}")
                print(f"      Tipo: {metadata.get('tipo_principal')}")
                print(f"      Rating: {metadata.get('rating')}")
                print(f"      Precio: {metadata.get('nivel_precios__descripcion')}")
                print(f"      Score: {result['score']:.3f}")
                
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
        
        print()

def main():
    """
    Funci√≥n principal que ejecuta todas las pruebas de precios
    """
    print("üöÄ INICIANDO PRUEBAS DE NIVELES DE PRECIO")
    print("=" * 60)
    
    # Verificar configuraci√≥n
    if not os.getenv('PINECONE_API_KEY'):
        print("‚ùå Error: PINECONE_API_KEY no est√° configurada")
        return
    
    if not os.getenv('API_KEY_OPENAI'):
        print("‚ùå Error: API_KEY_OPENAI no est√° configurada")
        return
    
    print("‚úÖ Configuraci√≥n verificada")
    print()
    
    try:
        # Ejecutar pruebas
        test_price_level_search()
        test_price_ranges()
        test_smart_search_with_prices()
        
        print("\nüéâ ¬°Pruebas de precios completadas!")
        print("\nüí° Informaci√≥n de niveles de precio:")
        print("   - Nivel 0 (Gratis): 0.00 PEN")
        print("   - Nivel 1 (Econ√≥mico): 0.00-50.00 PEN")
        print("   - Nivel 2 (Moderado): 50.00-150.00 PEN")
        print("   - Nivel 3 (Caro): 150.00-400.00 PEN")
        print("   - Nivel 4 (Muy Caro): 400.00-1000.00 PEN")
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {str(e)}")

if __name__ == "__main__":
    main() 